library(openintro)
library(ggplot2)
# 3. make scatter plot with ggplot
ggplot(loan50, aes(x=houseownership, y=interest_rate)) +
geom_point()
# 3. make scatter plot with ggplot
ggplot(loan50, aes(x=homeownership, y=interest_rate)) +
geom_point()
# 1. check data set
str(loan50)
# 3. make scatter plot with ggplot
ggplot(loan50, aes(x=loan_amount, y=interest_rate)) +
geom_point()
# 4. make dot plot of x_var
ggplot(loan50, aes(x=houseownership)) +
geom_dotplot()
# 4. make dot plot of x_var
ggplot(loan50, aes(x=loan_amount)) +
geom_dotplot()
# 5. make histogram
ggplot(loan50, aes(x=loan_amount)) +
geom_histogram(bins=8)
# Install the mosaic package if you haven't already
install.packages("mosaic")
library(mosaic)
---
title: "R Notebook"
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
```{r}
plot(cars)
plot(cars)
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd+Option+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
```{r setup, include=FALSE}
---
title: "Untitled"
knitr::opts_chunk$set(include = FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
ggplot(loan50, aes(x=poverty_rate, y=median_household_income)) +
ggplot(loan50, aes(x=poverty_rate, y=median_household_income)) +
geom_point()
ggplot(loan50, aes(x=poverty_rate, y=median_household_income)) +
geom_point()
summary(loan50)
# summary(loan50)
name(loan50)
# summary(loan50)
names(loan50)
vignette(loan50)
vignette("datasets",loan50)
data(package=openintro)
data(package="openintro")
# summary(loan50)
names(loans_full_schema)
ggplot(loans_full_schema, aes(x=poverty_rate, y=median_household_income)) +
geom_point()
# summary(loan50)
sort(names(loans_full_schema))
# summary(loan50)
sort(names(county))
ggplot(county, aes(x=poverty, y=median_hh_income)) +
geom_point()
str(county)
ggplot(data=county, map=aes(x=pop2010, y=pop2020)) +
geom_point()
ggplot(data=county, map=aes(x=pop2010, y=pop2017)) +
geom_point()
ggplot(data=county, map=aes(x=pop2010, y=per_capita_income)) +
geom_point()
ggplot(data=county, map=aes(x=homeonwership, y=per_capita_income)) +
geom_point()
ggplot(data=county, map=aes(x=homeownership, y=per_capita_income)) +
geom_point()
ggplot(data=county, map=aes(x=homeownership, y=pop2010)) +
geom_point()
ggplot(data=county, map=aes(x=homeownership, y=poverty)) +
geom_point()
ggplot(data=county, map=aes(x=unemployment_rate, y=poverty)) +
geom_point()
sym <- hist(	iris$Sepal.Length)
skewed_left <- 	hist(faithful$waiting)
skewed_right <- hist(housing$price)
skewed_right <- hist(housing$price)
skewed_left <- ggplot(data=faithful, aes(x=waiting)) +
geom_histogram()
skewed_left <- ggplot(data=faithful, aes(x=waiting)) +
geom_histogram()
skewed_left
skewed_left <- ggplot(data=faithful, aes(x=waiting)) +
geom_histogram(bins=100)
skewed_left
hist(mammals$body)
hist(gss2010$hours)
hist(gss2010$hrs1)
hist(gss2010$hrs1, bins=3)
ggplot(data=gss2010, aes(x=hrs1)) +
geom_histogram()
# Symmetric dataset: Normal distribution
set.seed(123)
symmetric_data <- rnorm(1000, mean = 50, sd = 10)
# Plot histogram
hist(symmetric_data, main="Symmetric Distribution (Normal)", xlab="Value", col="lightblue")
####
# Positive Association
set.seed(123)
x_pos <- rnorm(100, mean = 50, sd = 10)
y_pos <- 2 * x_pos + rnorm(100, mean = 0, sd = 10)
# Plot
plot(x_pos, y_pos, main="Positive Association", xlab="X", ylab="Y", col="blue", pch=16)
# Negative Association
set.seed(123)
x_neg <- rnorm(100, mean = 50, sd = 10)
y_neg <- -2 * x_neg + rnorm(100, mean = 0, sd = 10)
# Plot
plot(x_neg, y_neg, main="Negative Association", xlab="X", ylab="Y", col="red", pch=16)
# No Association
set.seed(123)
x_none <- rnorm(100, mean = 50, sd = 10)
y_none <- rnorm(100, mean = 50, sd = 10)
# Plot
plot(x_none, y_none, main="No Association", xlab="X", ylab="Y", col="green", pch=16)
# (Strongly)-linear example (positive since it looks like a line with a positive slope)
ggplot(data=county, map=aes(x=pop2010, y=pop2017)) +
geom_point()
# Plot
plot(x_none, y_none, main="No Association", xlab="X", ylab="Y", col="green", pch=16)
data1 <- data.frame(
rnorm(100, mean = 50, sd = 10),
2 * x_pos + rnorm(100, mean = 0, sd = 10)
)
v[1]
vec <- c(1,2,3)
vec[1]
vec[1] = 3
vec
# Install the mosaic package if you haven't already
install.packages("tidyverse")
library("tidyverse")
# Install the `readxl` package if you haven't already
install.packages("readxl")
library("readxl")
Help("readxl")
View("readxl")
help("readxl")
?rnorm
data_association <- data.frame(
x = rnorm(100, mean = 50, sd = 10),
y_1 = 2 * x + rnorm(100, mean = 0, sd = 10),
y_2 = -2 * x + rnorm(100, mean = 0, sd = 10),
y_3 = rnorm(100, mean = 50, sd = 10)
)
x <- rnorm(100, mean = 50, sd = 10)
data_association <- data.frame(
x <- x,
y_1 <- 2 * x + rnorm(100, mean = 0, sd = 10),
y_2 <- -2 * x + rnorm(100, mean = 0, sd = 10),
y_3 <- rnorm(100, mean = 50, sd = 10)
)
#### data set
set.seed(123)
x <- rnorm(100, mean = 50, sd = 10)
data_association <- data.frame(
x <- x,
y_1 <- 2 * x + rnorm(100, mean = 0, sd = 10),
y_2 <- -2 * x + rnorm(100, mean = 0, sd = 10),
y_3 <- rnorm(100, mean = 50, sd = 10)
)
# check the data set
str(data_association)
# Here is a way to scatter plot x = x and y = y_1 from the data set `data_association`
ggplot(data=data_association, map=aes(x=x, y=y_1)) +
geom_point()
# Here is a way to scatter plot x = x and y = y_1 from the data set `data_association`
ggplot(data=data_association, map=aes(x=x, y=y_1)) +
geom_point()
## First load required libraries
library(openintro)
library(ggplot2)
#### data set
set.seed(123)
x <- rnorm(100, mean = 50, sd = 10)
data_association <- data.frame(
x <- x,
y_1 <- 2 * x + rnorm(100, mean = 0, sd = 10),
y_2 <- -2 * x + rnorm(100, mean = 0, sd = 10),
y_3 <- rnorm(100, mean = 50, sd = 10)
)
# check the data set
str(data_association)
# Here is a way to scatter plot x = x and y = y_1 from the data set `data_association`
ggplot(data=data_association, map=aes(x=x, y=y_1)) +
geom_point()
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram()
#### data set
data_histogram <- data.frame(
symmetric_data <- rnorm(1000, mean = 50, sd = 10),
left_skewed_data <- (rnorm(1000, mean = 10, sd = 2))^2,
right_skewed_data <- rexp(1000, rate = 0.1)
)
# check the data set
str(data_histogram)
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram()
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram(bins=10)
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=left_skewed_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=right_skewed_data)) +
geom_histogram(bins=12)
#### data set
data_histogram <- data.frame(
symmetric_data <- rnorm(1000, mean = 50, sd = 10),
left_skewed_data <- rexp(1000, rate = 1),
right_skewed_data <- rexp(1000, rate = 0.1)
)
# check the data set
str(data_histogram)
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=left_skewed_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=right_skewed_data)) +
geom_histogram(bins=12)
vec <- c(1,2,3)
#### data set
data_histogram <- data.frame(
symmetric_data <- rnorm(1000, mean = 50, sd = 10),
left_skewed_data <- -rexp(1000, rate = 1),
right_skewed_data <- rexp(1000, rate = 0.1)
)
# check the data set
str(data_histogram)
# histogram for each of the variables
ggplot(data=data_histogram, map=aes(x=symmetric_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=left_skewed_data)) +
geom_histogram(bins=12)
ggplot(data=data_histogram, map=aes(x=right_skewed_data)) +
geom_histogram(bins=12)
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_histogram()
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_dotplot()
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_dotplot() +
geom_vline(xintercept = mean(lean50$interest_rate))
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_dotplot() +
geom_vline(xintercept = mean(loan50$interest_rate))
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_dotplot() +
geom_vline(xintercept = mean(loan50$interest_rate), color='blue')
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_histogram()
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_dotplot()
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_boxplot()
ggplot(data=loan50, map=aes(x=interest_rate)) +
geom_boxplot() >%>
ggplot(data=loan50, aes(x=interest_rate)) +
geom_boxplot() +
geom_dotplot()
ggplot(data=loan50, aes(x=interest_rate)) +
geom_boxplot() +
geom_dotplot(alpha=0.2)
ggplot(data=loan50, aes(x=interest_rate)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center')
max(loan50$interest_rate)
which.max(loan50$interest_rate)
str(loan50)
quit()
## First load required libraries
library(openintro)
library(ggplot2)
# Question 1.
# (1) Make a scatter plot of the variables `total_credit_limit` (for x) and `total_credit_utilized` (for y) in `loan50`.
ggplot(data=<>, map=aes(x=<>, y=<>)) +
# Question 1.
# (1) Make a scatter plot of the variables `total_credit_limit` (for x) and `total_credit_utilized` (for y) in `loan50`.
ggplot(data=loan50, map=aes(x=total_credit_limit, y=total_credit_utilized)) +
geom_point()
str(loan50)
# Question 1.
# (1) Make a scatter plot of the variables `total_credit_limit` (for x) and `total_credit_utilized` (for y) in `loan50`.
ggplot(data=loan50, map=aes(x=total_credit_limit, y=debt_to_income)) +
geom_point()
# Question 1.
# (1) Make a scatter plot of the variables `total_credit_limit` (for x) and `total_credit_utilized` (for y) in `loan50`.
ggplot(data=loan50, map=aes(x=debt_to_income, y=total_credit_utilized)) +
geom_point()
# Question 2.
# (1) Make a histogram of the variable `annual_income` in `loan50`.
ggplot(data=loan50, map=aes(x=annual_income)) +
geom_histogram()
# Question 3. Consider the variable `num_cc_carrying_balance` in `loan50`.
# (1) Save the sorted loan50@num_cc_carrying_balance and to the variable my_var.
my_var <- sort(loan50@num_cc_carrying_balance)
# (2) Find Q1, median, and Q3
median(my_var)
# Question 3. Consider the variable `num_cc_carrying_balance` in `loan50`.
# (1) Save the sorted loan50$num_cc_carrying_balance and to the variable my_var.
my_var <- sort(loan50$num_cc_carrying_balance)
# (2) Find Q1, median, and Q3
median(my_var)
library("openintro")
library("tidyverse")
library(tidyverse)
library("tidyverse")
quit()
library("openintro")
library("tidyverse")
loans_full_schema$application_type
loans_full_schema$homeownership
loans_full_schema$homeownership
loans_full_schema$application_type
loans_full_schema$homeownership
tally(loans_full_schema$application_type)
summary(loans_full_schema$application_type)
summary(loans_full_schema$homeownership)
table(loans_full_schema$application_type)
table(loans_full_schema$homeownership)
summary(loans_full_schema$application_type) == table(loans_full_schema$application_type)
table(loans_full_schema$application_type,loans_full_schema$homeownership)
# Check how many records have missing homeownership
sum(is.na(loans_full_schema$homeownership))
unique(loans_full_schema$homeownership)
unique(loans_full_schema$application_type)
unique(t)
t <- table(loans_full_schema$application_type,loans_full_schema$homeownership)
t
unique(t)
addmargins(t)
var_h <- loans_full_schema$homeownership
var_a <- loans_full_schema$application_type
is.na(var_a)
sum(is.na(var_a))
sum(is.na(var_t))
sum(is.na(var_h))
unique(var_h)
unique(var_a)
unique(length(var_a))
length(unique(var_h))
length(unique(var_a))
unique(var_h)
table(var_t, useNA = "no")
table(var_t, useNA = "no")
table(var_a, useNA = "no")
table(var_h, useNA = "no")
table(var_h, useNA = "yes")
table(var_h, useNA = "ifany")
table(var_h, useNA = "always")
table(var_h, useNA = "no")
addmargins(table(var_h, useNA = "no"))
prop.table(t)
print(t)
sum(t)
prop.table(t, margin=1)
prop.table(t, margin=2)
loan50$homeownership
str(loan50)
t2 <- table(loan50$loan_purpose, loan50$homeownership)
t2
str(loan50)
t2 <- table(loan50$verified_income, loan50$homeownership)
t2
str(loan50)
str(loans_full_schema)
t2 <- table(loan50$verified_income, loan50$homeownership)
t2
t2 <- table(as.factor(loan50$verified_income), loan50$homeownership)
t2
t2 <- table(as.factor(loan50$verified_income), as.factor(loan50$homeownership))
t2
prop.table(t2)
addmargins(prop.table(t2))
library("openintro")
lon50
loan50
str(loan50)
library("openintro")
library("ggplot2")
## Question 1
my_vec <- c( 15, 8, 7, 2, 19, 3, 11)
my_vec <- sort(my_vec)
my_vec
### (b) Make the box plot of my_vec: the following line creates a data frame consisting of the variable my_vec
my_data <- data.frame(my_vec)
ggplot(data=my_data, aes(x=my_vec)) +
geom_boxplot()
my_vec2 <- my_vec
my_vec2[7] <- 61
my_vec2
ggplot(data=my_data, aes(x=my_vec2)) +
geom_boxplot()
ggplot(data=my_data, aes(x=my_vec)) +
geom_histogram()
2/38
18/38
(1/2)^5
4/36
1/36
(3/4)^5*(1/4)
(1/4)^7
1-(3/4)^7
26/40
5/22
3/17
(90+60)/211
(91+60)/211
15/43
0.5*0.997 + 0.5 * 0.926
0.5*0.997 + 0.5 * (1-0.926)
0.52*0.38+0.48*0.44
0.52*0.38/(0.52*0.38+0.48*0.44)
140 * 0.18
3*4*3/52 + 5*3/52 + 20/52
3*4*3/52 + 5*3/52 + 20/52 -2
3*4*3/52 + 5*4/52 + 20/52 -2
18+8-11
0.34 * 25 + 0.14 * 35
0.34 * 25 + 0.14 * (25+35)
library("openintro")
library("ggplot2")
names(county)
str(county)
library("ggmosaic")
ggplot(data=county, aes(x=metro)) +
geom_mosaic()
ggplot(data=county, map=aes(x=metro)) +
geom_mosaic()
ggplot(data=county, map=aes(x=product(metro))) +
geom_mosaic()
ggplot(data=county, aes(x=product(metro))) +
geom_mosaic()
ggplot(data=county) +
geom_mosaic(aes(x=product(metro)))
order1 + order2
order1 <- ggplot(data = flights) +
geom_mosaic(aes(x = product(do_you_recline, rude_to_recline), fill = do_you_recline))
order2 <- ggplot(data = flights) +
geom_mosaic(aes(x=product(rude_to_recline, do_you_recline), fill = do_you_recline))
order1 + order2
ggplot(data=county) +
geom_bar(aes(x=product(metro)))
ggplot(data=county) +
geom_bar(aes(x=product(metro)))
ggplot(data=county, aes(x=product(metro))) +
geom_bar()
ggplot(data=county, mapping = aes(x=product(metro))) +
geom_bar()
ggplot(data=county, mapping = aes(x=metro)) +
geom_bar()
